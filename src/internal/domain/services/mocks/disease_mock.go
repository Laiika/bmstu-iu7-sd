// Code generated by MockGen. DO NOT EDIT.
// Source: sd/internal/domain/services (interfaces: IDiseaseRepo)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	entities "sd/internal/domain/entities"

	gomock "github.com/golang/mock/gomock"
)

// MockIDiseaseRepo is a mock of IDiseaseRepo interface.
type MockIDiseaseRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIDiseaseRepoMockRecorder
}

// MockIDiseaseRepoMockRecorder is the mock recorder for MockIDiseaseRepo.
type MockIDiseaseRepoMockRecorder struct {
	mock *MockIDiseaseRepo
}

// NewMockIDiseaseRepo creates a new mock instance.
func NewMockIDiseaseRepo(ctrl *gomock.Controller) *MockIDiseaseRepo {
	mock := &MockIDiseaseRepo{ctrl: ctrl}
	mock.recorder = &MockIDiseaseRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDiseaseRepo) EXPECT() *MockIDiseaseRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIDiseaseRepo) Create(arg0 context.Context, arg1 *entities.Disease) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIDiseaseRepoMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIDiseaseRepo)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockIDiseaseRepo) Delete(arg0 context.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIDiseaseRepoMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIDiseaseRepo)(nil).Delete), arg0, arg1)
}

// GetAll mocks base method.
func (m *MockIDiseaseRepo) GetAll(arg0 context.Context) (entities.Diseases, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0)
	ret0, _ := ret[0].(entities.Diseases)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockIDiseaseRepoMockRecorder) GetAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockIDiseaseRepo)(nil).GetAll), arg0)
}

// GetAnimalAll mocks base method.
func (m *MockIDiseaseRepo) GetAnimalAll(arg0 context.Context, arg1 int) (entities.Diseases, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimalAll", arg0, arg1)
	ret0, _ := ret[0].(entities.Diseases)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimalAll indicates an expected call of GetAnimalAll.
func (mr *MockIDiseaseRepoMockRecorder) GetAnimalAll(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimalAll", reflect.TypeOf((*MockIDiseaseRepo)(nil).GetAnimalAll), arg0, arg1)
}

// GetById mocks base method.
func (m *MockIDiseaseRepo) GetById(arg0 context.Context, arg1 int) (*entities.Disease, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", arg0, arg1)
	ret0, _ := ret[0].(*entities.Disease)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockIDiseaseRepoMockRecorder) GetById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockIDiseaseRepo)(nil).GetById), arg0, arg1)
}

// Update mocks base method.
func (m *MockIDiseaseRepo) Update(arg0 context.Context, arg1 *entities.Disease) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIDiseaseRepoMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIDiseaseRepo)(nil).Update), arg0, arg1)
}
