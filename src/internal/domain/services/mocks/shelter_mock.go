// Code generated by MockGen. DO NOT EDIT.
// Source: sd/internal/domain/services (interfaces: IShelterRepo)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	entities "sd/internal/domain/entities"

	gomock "github.com/golang/mock/gomock"
)

// MockIShelterRepo is a mock of IShelterRepo interface.
type MockIShelterRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIShelterRepoMockRecorder
}

// MockIShelterRepoMockRecorder is the mock recorder for MockIShelterRepo.
type MockIShelterRepoMockRecorder struct {
	mock *MockIShelterRepo
}

// NewMockIShelterRepo creates a new mock instance.
func NewMockIShelterRepo(ctrl *gomock.Controller) *MockIShelterRepo {
	mock := &MockIShelterRepo{ctrl: ctrl}
	mock.recorder = &MockIShelterRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIShelterRepo) EXPECT() *MockIShelterRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIShelterRepo) Create(arg0 context.Context, arg1 *entities.Shelter) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIShelterRepoMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIShelterRepo)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockIShelterRepo) Delete(arg0 context.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIShelterRepoMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIShelterRepo)(nil).Delete), arg0, arg1)
}

// GetAll mocks base method.
func (m *MockIShelterRepo) GetAll(arg0 context.Context) (entities.Shelters, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0)
	ret0, _ := ret[0].(entities.Shelters)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockIShelterRepoMockRecorder) GetAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockIShelterRepo)(nil).GetAll), arg0)
}

// GetById mocks base method.
func (m *MockIShelterRepo) GetById(arg0 context.Context, arg1 int) (*entities.Shelter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", arg0, arg1)
	ret0, _ := ret[0].(*entities.Shelter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockIShelterRepoMockRecorder) GetById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockIShelterRepo)(nil).GetById), arg0, arg1)
}

// Update mocks base method.
func (m *MockIShelterRepo) Update(arg0 context.Context, arg1 *entities.Shelter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIShelterRepoMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIShelterRepo)(nil).Update), arg0, arg1)
}
